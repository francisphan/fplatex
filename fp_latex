
#!/usr/bin/env ruby

require 'optparse'
require 'highline/import'

class ScriptArguments < Hash
    def initialize(args)
        super()

        opt_parser = OptionParser.new do |opts|
            opts.banner = "Usage: fp_latex [options] \n If options aren't covered, script will ask for variables"

            opts.on('-c COURSE', '--course', 'The course this assignment is for') do |course|
                self[:course] = course
            end

            opts.on('-a AUTHOR', '--author', 'Your name') do |author|
                self[:author] = author
            end

            opts.on('-t TITLE', '--title', 'Homework Assignment Name') do |title|
                self[:title] = title
            end

            opts.on('-d DUEDATE', '--due-date', 'Due date of assignment') do |due_date|
                self[:due_date] = due_date
            end

            opts.on('-p PROFESSOR', '--professor', 'The professor for the course') do |professor|
                self[:professor] = professor
            end

            opts.on('-f FILENAME', '--filename', 'Desired filename of latex file, appends \'.tex\' to whatever the input is') do |filename|
                self[:filename] = filename + ".tex"
            end

            opts.on('-h', '--help', 'Display this help and exit') do
                puts opts
                exit
            end
        end

        opt_parser.parse!(args)

      end
end

arguments = ScriptArguments.new(ARGV)

class LatexVariables
    def initialize(args)

        if args[:filename]
            @filename = args[:filename]
            if File.exists?(args[:filename])
                confirm = ask("File named #{args[:filename]} already exists, overwrite? [Y/N] ") { |yn| yn.limit = 1, yn.validate = /[yn]/i }
                exit unless confirm.downcase == 'y'
            else
                system "mv latex_hw_template.tex #{args[:filename]}"
            end
        else
            @filename = ask("What would you like to name this latex file?")
            @filename = @filename + ".tex"
            system "mv latex_hw_template.tex #{@filename}"
        end
        if args[:course]
            @course = args[:course]
        else
            @course = ask("What course is this assignment for?")
        end
        if args[:professor]
            @professor = args[:professor]
        else
            @professor = ask("What is the name of your professor?")
        end
        if args[:author]
            @author = args[:author]
        else
            @author = ask("Who are you?")
        end
        if args[:due_date]
            @due_date = args[:due_date]
        else
            @due_date = ask("When is this assignment due?")
        end
        if args[:title]
            @title = args[:title]
        else
            @title = ask("What is the title of this assignment?")
        end
        text = File.read(@filename)
        new_text = text.gsub(/HOMEWORKTITLE/, @title).gsub(/DUEDATE/, @due_date).gsub(/COURSE/, @course).gsub(/PROFESSOR/, @professor).gsub(/AUTHOR/,@author)
        File.write(@filename, new_text)

    end

    def execute
        text = File.read(@filename)
        new_text = text.gsub(/HOMEWORKTITLE/, @title).gsub(/DUEDATE/, @due_date).gsub(/COURSE/, @course).gsub(/PROFESSOR/, @professor).gsub(/AUTHOR/,@author)
        File.write(@filename, new_text)
        system "latex #{@filename}"
    end

end

latex_variables = LatexVariables.new(arguments)
latex_variables.execute